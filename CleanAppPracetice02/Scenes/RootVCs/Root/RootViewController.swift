//
//  RootViewController.swift
//  CleanAppPracetice02
//
//  Created by Papon Supamongkonchai on 20/7/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


//MARK: === For Paging Controller ===
enum SideMenuPage:Int {
    case Home = 0
    case News = 1
    case Activity = 2
    case Setting = 3
    
    
    func index() -> Int {
        return self.rawValue
    }
    
    func string() -> String {
        
        switch self {
        case .Home: return DrawerMenu.Home()
        case .News: return DrawerMenu.News()
        case .Activity: return DrawerMenu.Activity()
        case .Setting: return DrawerMenu.Setting()
        }
    }
}
//MARK: ==== Paging Menu Protocal ====

fileprivate var RootLandingPageControllers: [UIViewController] {
    
    let homeViewController = HomeViewController.instantiateFromStoryboard()//index menu 0
    let newsViewController = NewsViewController.instantiateFromStoryboard()
    let activityViewController = ActivityViewController.instantiateFromStoryboard()
    let settingViewController = SettingViewController.instantiateFromStoryboard()
    
    
    return [homeViewController,newsViewController,activityViewController,settingViewController]
}

fileprivate struct RootMenuItemHome: MenuItemViewCustomizable {}
fileprivate struct RootMenuItemNews: MenuItemViewCustomizable {}
fileprivate struct RootMenuItemActivity: MenuItemViewCustomizable {}
fileprivate struct RootMenuItemSetting: MenuItemViewCustomizable {}


fileprivate struct RootPagingMenuOptions: PagingMenuControllerCustomizable {
    var componentType: ComponentType {
        return .all(menuOptions: MenuOptions(), pagingControllers: RootLandingPageControllers)
    }
    var menuControllerSet: MenuControllerSet {
        return .single
    }
    
    struct MenuOptions: MenuViewCustomizable {
        var displayMode: MenuDisplayMode {
            return .segmentedControl
        }
        var height: CGFloat {
            return 0
        }
        var itemsOptions: [MenuItemViewCustomizable] {
            
            return [RootMenuItemHome(), RootMenuItemNews(),RootMenuItemActivity() ,RootMenuItemSetting()]
        }
    }
}

//MARK: ==== ViewController ====
protocol RootDisplayLogic: AnyObject
{
    func displaySomething(viewModel: Root.Something.ViewModel)
}

class RootViewController: UIViewController, RootDisplayLogic, UITabBarDelegate
{
    // MARK: Destination ViewController
    static fileprivate var rootViewController: RootViewController?
    
    static func sharedInstance() -> RootViewController {
        if let sharedInstance = RootViewController.rootViewController {
            
            return sharedInstance
        }else{
            RootViewController.rootViewController = RootViewController()
            _ = RootViewController.rootViewController?.view
            if let rootController = RootViewController.rootViewController{
                return rootController
            }else{
                return RootViewController()
            }
            
        }
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    fileprivate var tabHomeMenu:UITabBarItem!
    fileprivate var tabNewsMenu:UITabBarItem!
    fileprivate var tabActivityMenu:UITabBarItem!
    fileprivate var tabSettingMenu:UITabBarItem!
    
    var viewMap = Dictionary<String,AnyObject?>() //[String: AnyObject] = [:]
    var activeView = ""
    var currentPage:SideMenuPage = .Home
    
    fileprivate var options: PagingMenuControllerCustomizable!
    fileprivate var pagingMenuController: PagingMenuController!
    
    // MARK: interactor, router
    var interactor: RootBusinessLogic?
    var router: (NSObjectProtocol & RootRoutingLogic & RootDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RootInteractor()
        let presenter = RootPresenter()
        let router = RootRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        initRootPaging()
        doSomething()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        reloadTabbar()
        
    }
    
    override func viewSafeAreaInsetsDidChange() {
        reloadTabbar()
    }
    
    // MARK: Do something
    @IBOutlet fileprivate var mainTabbar:UITabBar!
    //@IBOutlet weak var nameTextField: UITextField!
    
    func initRootPaging(){
        RootViewController.rootViewController = self
        mainTabbar.delegate = self
        
        pagingMenuController = self.children.first as? PagingMenuController
        
        let options = RootPagingMenuOptions()
        pagingMenuController.setup(options)
    }
    
    func showView(page:SideMenuPage) {
        currentPage = page
        pagingMenuController.move(toPage: page.index())
        activeView = page.string()
        
        focusTabMenu(page: page)
    }
    
    func reloadTabbar(){
        
        tabHomeMenu = nil
        tabNewsMenu = nil
        tabActivityMenu = nil
        tabSettingMenu = nil
        
        tabHomeMenu = UITabBarItem(title: "Home", image: UIImage(named: ""), selectedImage: UIImage(named: ""))
        tabNewsMenu = UITabBarItem(title: "News", image: UIImage(named: ""), selectedImage: UIImage(named: ""))
        tabActivityMenu = UITabBarItem(title: "Activity", image: UIImage(named: ""), selectedImage: UIImage(named: ""))
        tabSettingMenu = UITabBarItem(title: "Setting", image: UIImage(named: ""), selectedImage: UIImage(named: ""))
        
        mainTabbar.items?.removeAll()
        mainTabbar.items = [tabHomeMenu,tabNewsMenu,tabActivityMenu,tabSettingMenu]
        
        focusTabMenu(page: currentPage)
        
    }
    
    func focusTabMenu(page:SideMenuPage){
        
        switch page {
        case .Home: mainTabbar.selectedItem = tabHomeMenu
        case .News: mainTabbar.selectedItem = tabNewsMenu
        case .Activity: mainTabbar.selectedItem = tabActivityMenu
        case .Setting: mainTabbar.selectedItem = tabSettingMenu
            
        default: mainTabbar.selectedItem = nil
        }
    }
    
    func doSomething()
    {
        let request = Root.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Root.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    // UITabBarDelegate
    func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem){
        
        switch item {
        case tabHomeMenu: AppDirector.showHome()
        case tabNewsMenu: AppDirector.showNews()
        case tabActivityMenu: AppDirector.showActivity()
        case tabSettingMenu: AppDirector.showSetting()
            
        default:break

        }
    }
}
